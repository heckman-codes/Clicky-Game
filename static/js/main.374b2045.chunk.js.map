{"version":3,"sources":["components/Navbar/index.js","components/Footer/index.js","components/ImageCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","message","score","highscore","Footer","ImageCard","onClick","clickImg","id","alt","name","src","image","key","Wrapper","randomArray","array","i","length","j","Math","floor","random","temp","randomizedImages","images","pickedImage","App","state","includes","setTimeout","push","console","log","setState","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"mlCA2BeA,MAtBf,SAAgBC,GACd,OACE,yBAAKC,UAAU,qBACb,4BACE,4BACE,4CAIF,4BAAI,4BACDD,EAAME,UAGT,sCACUF,EAAMG,MADhB,kBACsCH,EAAMI,YAG9C,yBAAKH,UAAU,oCAAmC,uBAAGA,UAAU,qBAAb,mF,MCXzCI,MARf,WACE,OACE,4BAAQJ,UAAU,UAChB,+C,cCcSK,MAjBf,SAAmBN,GACjB,OACE,yBAAKC,UAAU,sEACb,yBAAKA,UAAU,OAAOM,QAAS,kBAAMP,EAAMQ,SAASR,EAAMS,MACxD,yBAAKR,UAAU,aACb,yBAAKA,UAAU,YACbS,IAAKV,EAAMW,KACXC,IAAKZ,EAAMa,MACXJ,GAAIT,EAAMS,GACVK,IAAKd,EAAMS,S,MCHRM,MANf,SAAiBf,GACf,OAAO,0BAAMC,UAAU,aACrB,uCAAKA,UAAU,OAAUD,M,OCI7B,SAASgB,EAAYC,GAEnB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,EAGT,IAAId,EAAQ,EACRC,EAAY,EACZF,EAAU,mBAEVuB,EAAmBT,EAAYU,GAC/BC,EAAc,GAwDHC,E,2MApDbC,MAAQ,CACNH,U,EAGFlB,SAAW,SAACC,GACVgB,EAAmBT,EAAYU,GAC3BC,EAAYG,SAASrB,IACvBkB,EAAc,GACdxB,EAAQ,EACRD,EAAU,yBACV6B,YAAW,WACT7B,EAAU,4BACT,QAEHC,GAAS,IACIC,IACXA,EAAYD,GAEdD,EAAU,oBACV6B,YAAW,WACT7B,EAAU,4BACT,MAGLyB,EAAYK,KAAKvB,GAEjBwB,QAAQC,IAAIP,GACZM,QAAQC,IAAIzB,GACZ,EAAK0B,SAAS,CAAET,Y,wEAGR,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQxB,QAASA,EAASC,MAAOA,EAAOC,UAAWA,IACnD,kBAAC,EAAD,KACGqB,EAAiBW,KAAI,SAAAvB,GAAK,OACzB,kBAAC,EAAD,CACEL,SAAU,EAAKA,SACfC,GAAII,EAAMJ,GACVE,KAAME,EAAMF,KACZE,MAAOA,EAAMA,MACbC,IAAKD,EAAMJ,SAIjB,kBAAC,EAAD,W,GAhDU4B,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMpD,c","file":"static/js/main.374b2045.chunk.js","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar scoreboard\">\n      <ul>\n        <li>\n          <h2>\n            Clicky Game\n          </h2>\n        </li>\n        <li><h2>\n          {props.message}\n        </h2>\n        </li>\n        <li>\n          Score: {props.score} | High Score: {props.highscore}\n        </li>\n      </ul>\n      <div className=\"rules-div justify-content-center\"><p className=\"text-center rules\">Rules are simple: Click a picture you did not pick previously to get points.</p></div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Clicky-Game</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"col col-xs-6 col-sm-6 col-md-4 col-lg-3 d-flex align-items-stretch\">\n      <div className=\"card\" onClick={() => props.clickImg(props.id)}>\n        <div className=\"card-body\">\n          <img className=\"img-fluid\"\n            alt={props.name}\n            src={props.image}\n            id={props.id}\n            key={props.id}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"container\">\n    <div className=\"row\" {...props}></div>\n  </main>;\n}\n\nexport default Wrapper;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ImageCard from './components/ImageCard'\nimport Wrapper from './components/Wrapper'\nimport images from './images.json'\n\nfunction randomArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nvar score = 0;\nvar highscore = 0;\nvar message = \"Make a Selection\";\n\nvar randomizedImages = randomArray(images);\nvar pickedImage = [];\n\nclass App extends Component {\n\n  state = {\n    images\n  };\n\n  clickImg = (id) => {\n    randomizedImages = randomArray(images)\n    if (pickedImage.includes(id)) {\n      pickedImage = [];\n      score = 0;\n      message = \"Incorrect. Start over.\";\n      setTimeout(function () {\n        message = \"Make another selection.\"\n      }, 500)\n    } else {\n      score += 1;\n      if (score >= highscore) {\n        highscore = score;\n      }\n      message = \"Correct! Score +1\";\n      setTimeout(function () {\n        message = \"Make another selection.\"\n      }, 500)\n    }\n\n    pickedImage.push(id);\n\n    console.log(pickedImage);\n    console.log(id)\n    this.setState({ images });\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar message={message} score={score} highscore={highscore} />\n        <Wrapper >\n          {randomizedImages.map(image => (\n            <ImageCard\n              clickImg={this.clickImg}\n              id={image.id}\n              name={image.name}\n              image={image.image}\n              key={image.id}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}